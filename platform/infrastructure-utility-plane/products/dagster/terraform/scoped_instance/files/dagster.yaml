# README:
# - If using a fixed tag for images, changing the image pull policy to anything other than "Always"
#   will use a cached/stale image.
# - We recommend using unique tags for user code images, as this will guarantee that the docker
#   image will be consistent for the pipeline's entire execution.
---
global:
  postgresqlSecretName: "${postgresql_config.secret_name}"
#  # The DAGSTER_HOME env var is set by default on all nodes from this value
#  dagsterHome: "/opt/dagster/dagster_home"
#
#  # A service account name to use for this chart and all subcharts. If this is set, then
#  # dagster subcharts will not create their own service accounts.
#  serviceAccountName: ""

  # The name for the secret used to pass Celery broker and backend connection urls. This can
  # generally be left as the default, but can be useful if setting generateCeleryConfigSecret
  # to false below.
  celeryConfigSecretName: "${kubernetes_secret_dagster_celery}"

#nameOverride: ""
#fullnameOverride: ""
rbacEnabled: true
## Specify secrets to run containers based on images in private registries. See:
## https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod
#imagePullSecrets: []

####################################################################################################
# Dagster Webserver: Configuration for the Dagster webserver
####################################################################################################
dagsterWebserver:
  replicaCount: 2
  image:
    # When a tag is not supplied Æ’for a Dagster provided image,
    # it will default as the Helm chart version.
    repository: "docker.io/dagster/dagster-celery-k8s"
    tag: ~
    pullPolicy: Always

  # Support overriding the name prefix of the webserver pods
  nameOverride: "dagster-webserver"

  # Support path prefix (i.e. /dagster)
  pathPrefix: ~

  service:
    type: LoadBalancer
    ${indent(4, yamlencode(webserver_service_annotations))}

  # Defines a workspace for the webserver. This should only be set if user deployments are enabled, but
  # the subchart is disabled to manage user deployments in a separate Helm release.
  # In this case, the webserver will need the addresses of the code servers in order to load the user code,
  # or the name of an existing configmap to mount as the workspace file.
  workspace:
    enabled: true
    servers: []
    # Defines the name of a configmap provisioned outside of the
    # Helm release to use as workspace file. When set, `servers`
    # must be empty.
    externalConfigmap: ${workspace_servers_external_configmap}

  # Deploy a separate instance of the webserver in --read-only mode (can't launch runs, disable schedules, etc.)
  enableReadOnly: ${is_read_only}

  # The timeout in milliseconds to set on database statements sent to the Dagster instance.
  dbStatementTimeout: ~

  # The maximum age in seconds of a connection to use in the sqlalchemy connection pool.
  # Defaults to 1 hour if not set.
  # Set to -1 to disable.
  dbPoolRecycle: ~

  # The log level of the uvicorn web server, defaults to warning if not set
  logLevel: ~

  # Additional environment variables to set.
  # These will be directly applied to the daemon container. See
  # https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  #
  # Example:
  #
  # env:
  # - name: ENV_ONE
  #   value: "one"
  # - name: ENV_TWO
  #   value: "two"
  env: []

  # Additional environment variables can be retrieved and set from ConfigMaps. See:
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  #
  # Example:
  #
  # envConfigMaps:
  #   - name: config-map
  envConfigMaps: []

  # Additional environment variables can be retrieved and set from Secrets. See:
  # https://kubernetes.io/docs/concepts/configuration/secret/#use-case-as-container-environment-variables
  #
  # Example:
  #
  # envSecrets:
  #   - name: secret
  envSecrets: []

  # Additional labels that should be included on the deployment. See:
  # https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  #
  # Example:
  # labels:
  #   my-label-key: my_label-value
  deploymentLabels: {}

  # Additional labels that should be included on the pod. See:
  # https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  #
  # Example:
  # labels:
  #   my-label-key: my_label-value
  labels: {}

  # Additional volumes that should be included. See:
  # https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#volume-v1-core
  #
  # Example:
  #
  # volumes:
  #   - name: my-volume
  #     configMap: my-config-map
  volumes: []

  # Additional volume mounts that should be included. See:
  # See: https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#volumemount-v1-core
  #
  # Example:
  #
  # volumeMounts:
  #   - name: test-volume
  #     mountPath: /opt/dagster/test_folder
  #     subPath: test_file.yaml
  volumeMounts: []

  # Support Node, affinity and tolerations for webserver pod assignment. See:
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  # https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ${indent(2, yamlencode(webserver_annotations))}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  podSecurityContext: {}
  securityContext: {}
  resources: {}

  # Override the default K8s scheduler
  # schedulerName: ~

  # If you want to specify resources, uncomment the following lines, adjust them as necessary,
  # and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  # Readiness probe detects when the pod is ready to serve requests.
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes
  readinessProbe:
    httpGet:
      path: "/server_info"
      port: 80
    periodSeconds: 20
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 3

  # As of 0.14.0, liveness probes are disabled by default. If you want to enable them, it's recommended to also
  # enable startup probes.
  livenessProbe: {}
  startupProbe:
    enabled: false

####################################################################################################
# Compute Log Manager: Configuration for the compute log manager.
#
# By default, NoOpComputeLogManager is set as a compute log manager. As a result, stdout and stderr
# logs will be unavailable in the Dagster UI. To change this behavior, choose a compute log
# manager with a storage backend to capture and persist stdout and stderr logs.
#
# See https://docs.dagster.io/deployment/dagster-instance#compute-log-storage for more information.
####################################################################################################
computeLogManager:
  # Type can be one of [
  #   NoOpComputeLogManager,
  #   AzureBlobComputeLogManager,
  #   GCSComputeLogManager,
  #   S3ComputeLogManager,
  #   CustomComputeLogManager,
  # ]
  type: ${compute_logs.type}
  config:
    s3ComputeLogManager:
      bucket: ${compute_logs.bucket_name}
      prefix: ${compute_logs.key_prefix}
    gcsComputeLogManager:
      bucket: ${compute_logs.bucket_name}
      prefix: ${compute_logs.key_prefix}
  ##  Uncomment this configuration if the AzureBlobComputeLogManager is selected
  #   azureBlobComputeLogManager:
  #     storageAccount: ~
  #     container: ~
  #     secretKey: ~
  #     defaultAzureCredential: ~
  #     localDir: ~
  #     prefix: ~
  #     uploadInterval: ~
  ##  Uncomment this configuration if the GCSComputeLogManager is selected
  #   gcsComputeLogManager:
  #     bucket: ~
  #     localDir: ~
  #     prefix: ~
  #     jsonCredentialsEnvvar: ~
  #     uploadInterval: ~
  ##  Uncomment this configuration if the S3ComputeLogManager is selected
  #   s3ComputeLogManager:
  #     bucket: ~
  #     localDir: ~
  #     prefix: ~
  #     useSsl: ~
  #     verify: ~
  #     verifyCertPath: ~
  #     endpointUrl: ~
  #     skipEmptyFiles: ~
  #     uploadInterval: ~
  #     uploadExtraArgs: {}
  ##  Uncomment this configuration if the CustomComputeLogManager is selected.
  ##  Using this setting requires a custom webserver image that defines the user specified
  ##  compute log manager in an installed python module.
  #   customComputeLogManager:
  #     module: ~
  #     class: ~
  #     config: {}

pythonLogs: {}
## The names of python loggers that will be captured as Dagster logs
#  managedPythonLoggers:
#    - foo_logger
## The log level for the instance. Logs emitted below this severity will be ignored.
## One of [NOTSET, DEBUG, INFO, WARNING, WARN, ERROR, FATAL, CRITICAL]
#  pythonLogLevel: INFO
## Python log handlers that will be applied to all Dagster logs
#  dagsterHandlerConfig:
#    handlers:
#      myHandler:
#        class: logging.FileHandler
#        filename: "/logs/my_dagster_logs.log"
#        mode: "a"

####################################################################################################
# User Code Deployments: Configuration for user code containers to be loaded via GRPC server. For
# each item in the "deployments" list, a K8s Deployment and K8s Service will be created to run the
# GRPC server that the Dagster webserver communicates with to get definitions information and the current
# image information. These deployments can be updated independently of the Dagster webserver, and the webserver
# will pull the current image for all execution. When using a distributed executor (such as
# Celery-K8s) for job execution, the current image will be queried once and used for all
# op executions for that run. In order to guarantee that all op executions within a job
# execution use the same image, we recommend using a unique tag (ie not "latest").
#
# All user code will be invoked within the images.
####################################################################################################
dagster-user-deployments:
  # Creates a workspace file with the gRPC servers hosting your user code.
  enabled: true

  # If you plan on deploying user code in a separate Helm release, set this to false.
  enableSubchart: false


####################################################################################################
# Run Launcher: Configuration for run launcher
####################################################################################################
runLauncher:
  # Type can be one of [K8sRunLauncher, CeleryK8sRunLauncher, CustomRunLauncher]
  type: CeleryK8sRunLauncher

####################################################################################################
# PostgreSQL: Configuration values for postgresql
#
# https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
#
# A PostgreSQL database is required to run Dagster on Kubernetes. If postgresql.enabled is marked as
# false, the PG credentials specified here will still be used, and should point to an external PG
# database that is accessible from this chart.
####################################################################################################
postgresql:
  # set postgresql.enabled to be false to disable deploy of a PostgreSQL database and use an"${postgresql_config.password}"
  # existing external PostgreSQL database
  enabled: false

  # set this PostgreSQL hostname when using an external PostgreSQL database
  postgresqlHost: "${postgresql_config.host}"

  postgresqlUsername: "${postgresql_config.username}"

  # Note when changing this password (e.g. in test) that credentials will
  # persist as long as the PVCs do -- see:
  # https://github.com/helm/charts/issues/12836#issuecomment-524552358
  postgresqlPassword: "${postgresql_config.password}"

  postgresqlDatabase: "${postgresql_config.database}"

  # set postgresql parameter keywords for the connection string.
  # see: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS
  postgresqlParams: {}

  service:
    port: ${postgresql_config.port}

# Whether to generate a secret resource for the PostgreSQL password. Useful if
# global.postgresqlSecretName is managed outside of this helm chart.
generatePostgresqlPasswordSecret: false

# If true, the helm chart will create a secret for you with the Celery broker and backend
# connection urls, including an optional Redis or RabbitMQ password. Set this to false if you want
# to manage a secret with the Celery broker/backend connection strings yourself. If you manage
# the secret yourself, the secret should have the name specified in global.celeryConfigSecretName,
# and should have the broker URL in a DAGSTER_CELERY_BROKER_URL key and the backend URL in a
# DAGSTER_CELERY_BACKEND_URL key.
generateCeleryConfigSecret: false

####################################################################################################
# Redis: Configuration values for Redis. Can be used instead of RabbitMQ.
####################################################################################################
rabbitmq:
  enabled: false
redis:
  # To use redis instead of rabbitmq, set `enabled` to true.
  enabled: false

####################################################################################################
# Flower: (Optional) The flower web interface for diagnostics and debugging Celery queues & workers
####################################################################################################
flower:
  enabled: false

####################################################################################################
# Dagster Daemon (Optional) Deploy a daemon for launching queued runs and running schedules and
# sensors.
#
# By default, this daemon is included in your deployment and used to run schedules and sensors.
# Setting `enabled` to false will stop the daemon from being included in your deployment.
#
# Each thread in the daemon periodically sends heartbeats to indicate that it is still running.
# Setting `heartbeatTolerance` lets you configure how long each thread can run without sending
# a heartbeat before the daemon determines that one must be hanging and restarts the process.
#
# Setting `config.queuedRunCoordinator.maxConcurrentRuns` in `runCoordinator` allows you to set
# limits on the total number of runs that can execute at once.
####################################################################################################
dagsterDaemon:
  enabled: false

####################################################################################################
# As an open source project, we collect usage statistics to better understand how users engage
# with Dagster and to inform development priorities.
#
# Telemetry data will motivate projects such as adding functionality in frequently-used parts of
# the product and will help us understand adoption of new features.
#
# For more details, see:
# https://docs.dagster.io/getting-started/telemetry
####################################################################################################
telemetry:
  enabled: false

serviceAccount:
  name: ${service_account_config.name}
  create: false

additionalInstanceConfig:
  # TODO: make it configurable + test ...
  code_servers:
    reload_timeout: 60  # Value in seconds to wait